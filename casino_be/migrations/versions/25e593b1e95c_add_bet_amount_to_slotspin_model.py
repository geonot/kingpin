"""Previous migration, kept for history, but content needs review based on newer model changes"""

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '25e593b1e95c'
down_revision = '0005' # Linearize history: 0004 -> 0005 -> 25e593b1e95c
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # This migration seems to be removing many tables and columns.
    # Verify if this was intentional or if it should be combined/replaced
    # with a newer migration reflecting the current model state.

    # Example: If SlotSpin.bet_amount was added here, but models.py now defines it,
    # the autogenerate process later should handle it correctly.
    # Let's assume this migration's changes were superseded or incorrect based on the project goal.
    # We might need to generate a *new* migration from the current models.

    # op.add_column('slot_spin', sa.Column('bet_amount', sa.BigInteger(), nullable=False)) # Assuming it was added here originally

    # Commenting out potentially destructive operations from the original file
    # Ensure these changes are actually needed or are handled by a later migration.
    # op.drop_index('idx_slot_payout_slot_id', table_name='slot_payout')
    # op.drop_table('slot_payout')
    # op.drop_index('idx_user_bonus_user_id', table_name='user_bonus')
    # op.drop_table('user_bonus')
    # op.drop_index('idx_slot_payline_slot_id', table_name='slot_payline')
    # op.drop_table('slot_payline')
    # op.drop_index('idx_slot_reel_strip_slot_id', table_name='slot_reel_strip')
    # op.drop_table('slot_reel_strip')
    # op.drop_index('idx_match_slot_spin_id', table_name='match')
    # op.drop_table('match')

    # The following column drops likely correspond to the model refactoring (e.g., moving is_wild/is_scatter)
    # Keep these if they accurately reflect the transition from the '0004' state to the newer state.
    # op.drop_index('idx_slot_spin_game_session_id', table_name='slot_spin') # Recreated index likely needed later
    # op.drop_column('slot_spin', 'bonus_triggered') # Replaced by logic?
    # op.drop_column('slot_spin', 'is_bonus_spin') # Kept in current models.py? If so, remove drop. Check models.py. (Yes, it's kept, remove drop)
    # op.drop_column('slot_symbol', 'is_wild') # Correct, moved to Slot table via FK
    # op.drop_column('slot_symbol', 'is_scatter') # Correct, moved to Slot table via FK
    pass # Let a new auto-generated migration handle the changes from 0001/0005 to current state


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Reinstate columns/tables if they were dropped in upgrade(). Match the logic.

    # op.add_column('slot_symbol', sa.Column('is_scatter', sa.BOOLEAN(), autoincrement=False, nullable=False, server_default='false'))
    # op.add_column('slot_symbol', sa.Column('is_wild', sa.BOOLEAN(), autoincrement=False, nullable=False, server_default='false'))
    # op.add_column('slot_spin', sa.Column('is_bonus_spin', sa.BOOLEAN(), autoincrement=False, nullable=False, server_default='false')) # If kept
    # op.add_column('slot_spin', sa.Column('bonus_triggered', sa.BOOLEAN(), autoincrement=False, nullable=False, server_default='false')) # If removed

    # Reinstate dropped tables/indexes if necessary (match upgrade logic)
    # op.create_table('slot_payout', ...)
    # op.create_index('idx_slot_payout_slot_id', 'slot_payout', ['slot_id'], unique=False)
    # ... and so on for other dropped elements.
    pass # Adjust downgrade based on the actual upgrade operations performed

# NOTE: It's strongly recommended to delete this migration file and generate a fresh one
# using `flask db migrate -m "Refactor models for satoshis and improvements"` after ensuring
# models.py reflects the desired final state and the database is at the state of the previous valid migration (e.g., 0001 or 0005).

