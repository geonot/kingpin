# Autogenerated migration for new slot: Ancient Pyramids
"""
Revision ID: 20250604235754anci
Revises: 'plinko'
Create Date: 2025-06-04T23:57:54.340756+00:00
"""
from alembic import op
import sqlalchemy as sa
import datetime # Required for datetime.fromisoformat in generated code

# Attempt to import PostgreSQL specific types, fallback to generic JSON
try:
    from sqlalchemy.dialects import postgresql
    JSONB_TYPE = postgresql.JSONB(astext_type=sa.Text()) # Ensure astext_type for compatibility
except ImportError:
    JSONB_TYPE = sa.JSON

# revision identifiers, used by Alembic.
revision = '20250604235754anci'
down_revision = 'plinko' # Uses repr to correctly format None or string
branch_labels = None
depends_on = None

def upgrade():
    # Define table structures for insertion (should mirror models.py)
    slot_table = sa.table('slot',
        sa.Column('id', sa.Integer()),
        sa.Column('name', sa.String(100)),
        sa.Column('description', sa.Text()),
        sa.Column('num_rows', sa.Integer()),
        sa.Column('num_columns', sa.Integer()),
        sa.Column('num_symbols', sa.Integer()),
        sa.Column('wild_symbol_id', sa.Integer()), # Internal symbol ID
        sa.Column('scatter_symbol_id', sa.Integer()), # Internal symbol ID
        sa.Column('bonus_type', sa.String(50)),
        sa.Column('bonus_subtype', sa.String(50)),
        sa.Column('bonus_multiplier', sa.Float()),
        sa.Column('bonus_spins_trigger_count', sa.Integer()),
        sa.Column('bonus_spins_awarded', sa.Integer()),
        sa.Column('short_name', sa.String(50)),
        sa.Column('asset_directory', sa.String(255)),
        sa.Column('rtp', sa.Float()),
        sa.Column('volatility', sa.String(20)),
        sa.Column('is_active', sa.Boolean()),
        sa.Column('is_multiway', sa.Boolean()),
        sa.Column('reel_configurations', JSONB_TYPE),
        sa.Column('created_at', sa.DateTime(timezone=True)) # Ensure timezone=True if model expects it
    )

    slot_symbol_table = sa.table('slot_symbol',
        sa.Column('id', sa.Integer()), # This is PK of slot_symbol, not used in bulk_insert if auto-gen
        sa.Column('slot_id', sa.Integer()),
        sa.Column('symbol_internal_id', sa.Integer()),
        sa.Column('name', sa.String(50)),
        sa.Column('img_link', sa.String(255)),
        sa.Column('value_multiplier', sa.Float()),
        sa.Column('data', JSONB_TYPE)
    )

    # Data for slot table (ensure it's a list of dicts)
    # The dict_to_py_string helper ensures datetime objects are correctly represented
    _slot_insert_data = [{'id': 5, 'name': 'Ancient Pyramids', 'description': 'A fun slot game with a Ancient Pyramids theme, created by SlotBuilder.', 'num_rows': 3, 'num_columns': 5, 'num_symbols': 11, 'wild_symbol_id': 11, 'scatter_symbol_id': 9, 'bonus_type': 'free_spins', 'bonus_subtype': 'Ancient Pyramids', 'bonus_multiplier': 1.0, 'bonus_spins_trigger_count': 3, 'bonus_spins_awarded': 10, 'short_name': 'ancient_pyramids', 'asset_directory': '/ancient_pyramids/', 'rtp': 96.0, 'volatility': 'Medium', 'is_active': True, 'is_multiway': False, 'reel_configurations': None, 'created_at': datetime.datetime.fromisoformat('2025-06-04T23:57:54.340651+00:00')}]

    # Data for slot_symbol table
    _symbols_insert_data_list = [{'slot_id': 5, 'symbol_internal_id': 1, 'name': 'Low Symbol 1', 'img_link': '/ancient_pyramids/sprite_0.png', 'value_multiplier': 1.0, 'data': {}},
        {'slot_id': 5, 'symbol_internal_id': 2, 'name': 'Low Symbol 2', 'img_link': '/ancient_pyramids/sprite_1.png', 'value_multiplier': 1.5, 'data': {}},
        {'slot_id': 5, 'symbol_internal_id': 3, 'name': 'Low Symbol 3', 'img_link': '/ancient_pyramids/sprite_2.png', 'value_multiplier': 2.0, 'data': {}},
        {'slot_id': 5, 'symbol_internal_id': 4, 'name': 'Mid Symbol 1', 'img_link': '/ancient_pyramids/sprite_3.png', 'value_multiplier': 3.0, 'data': {}},
        {'slot_id': 5, 'symbol_internal_id': 5, 'name': 'Mid Symbol 2', 'img_link': '/ancient_pyramids/sprite_4.png', 'value_multiplier': 4.0, 'data': {}},
        {'slot_id': 5, 'symbol_internal_id': 6, 'name': 'Mid Symbol 3', 'img_link': '/ancient_pyramids/sprite_5.png', 'value_multiplier': 5.0, 'data': {}},
        {'slot_id': 5, 'symbol_internal_id': 7, 'name': 'High Symbol 1', 'img_link': '/ancient_pyramids/sprite_6.png', 'value_multiplier': 10.0, 'data': {}},
        {'slot_id': 5, 'symbol_internal_id': 8, 'name': 'High Symbol 2', 'img_link': '/ancient_pyramids/sprite_7.png', 'value_multiplier': 20.0, 'data': {}},
        {'slot_id': 5, 'symbol_internal_id': 9, 'name': 'Scatter', 'img_link': '/ancient_pyramids/sprite_8.png', 'value_multiplier': 0.0, 'data': {}},
        {'slot_id': 5, 'symbol_internal_id': 10, 'name': 'Bonus', 'img_link': '/ancient_pyramids/sprite_9.png', 'value_multiplier': 0.0, 'data': {}},
        {'slot_id': 5, 'symbol_internal_id': 11, 'name': 'Wild', 'img_link': '/ancient_pyramids/sprite_10.png', 'value_multiplier': 0.0, 'data': {}}]

    op.bulk_insert(slot_table, _slot_insert_data)
    op.bulk_insert(slot_symbol_table, _symbols_insert_data_list)

    print(f"Migration {revision}: Inserted slot 'Ancient Pyramids' (DB ID: 5) and its {len(_symbols_insert_data_list)} symbols.")

def downgrade():
    # Use f-strings for slot_id, ensure it's an int for safety if used directly in SQL
    # For op.execute, parameters should ideally be bound, but simple f-string is used here.
    op.execute(f"DELETE FROM slot_symbol WHERE slot_id = {int(5)}")
    op.execute(f"DELETE FROM slot WHERE id = {int(5)}")
    print(f"Migration {revision}: Rolled back slot 'Ancient Pyramids' (DB ID: 5) and its symbols.")
